<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Vollkorn&display=swap" rel="stylesheet">
    <script src="https://rawgit.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"></script>
    <title>Student Management System</title>
    <style>
        body {
            margin: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: rgb(131, 140, 190);
        }

        header img {
            margin-left: 50px;
            width: 70px;
            border-radius: 40px;
        }

        header img:hover {
            transform: scale(1.3);
        }

        .input-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 30px;
            margin-bottom: 40px;
            border: 2px solid #4CAF50;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            width: 70%;
        }

        #student-info span {
            margin-bottom: 8px;
            font-weight: bold;
        }

        table {
            border-collapse: collapse;
            margin: 0 50px 0 50px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            margin-top: 20px;
            background-color: #fff;
            border-color: black;
            font-family: 'Vollkorn', serif;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #4CAF50;
            color: #fff;
        }

        tbody tr:hover {
            background-color: #e0f2f1;
        }

        @media (max-width: 768px) {
            table {
                width: 100%;
            }
        }

        #printButton {
            background-color: #4CAF50;
            color: #fff;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-bottom: 20px; /* Added margin for better spacing */
        }

        #printButton:hover {
            background-color: #45a049;
        }
    </style>
</head>

<body>
    <header>
        <h1>Student marks</h1>
        <img id="college-logo" src="R.V._College_of_Engineering_logo.png" alt="" class="logo">
    </header>

    <div class="input-container">
        <% if (data) { %>
            <div id="student-info">
                <span>Name: <%= data.Name || 'N/A' %></span><br>
                <span>USN: <%= data.USN || 'N/A' %></span>
            </div>
        <% } else { %>
            <!-- If either USN or Name is blank, do not show the row -->
            <div style="display: none;"></div>
        <% } %>
    </div>

    <table>
        <thead>
            <tr>
                <th>Subject</th>
                <th>Quiz 1</th>
                <th>Test 1</th>
                <th>Quiz 2</th>
                <th>Test 2</th>
                <th>Avg Quiz</th>
                <th>Avg Test</th>
                <th>Total Classes</th>
                <th>Attended Classes</th>
                <th>Attendance %</th>
            </tr>
        </thead>
<tbody id="table-body">
<% let sub = null; %>
<% if (subject) { %>
    <% sub = subject; %>
<% } else if (a && a.subject) { %>
    <% sub = a.subject; %>
<% } %>

    <% if (data && data.Subjects && typeof data.Subjects === 'object') { %>
        <% for (let subject in data.Subjects) { %>
            <% if (subject === sub) { %> <!-- Add condition to check if the subject matches selectedSubject -->
                <tr>
                    <td><%= subject %></td>
                    <td><%= data.Subjects[subject].q1 || 'N/A' %></td>
                    <td><%= data.Subjects[subject].t1 || 'N/A' %></td>
                    <td><%= data.Subjects[subject].q2 || 'N/A' %></td>
                    <td><%= data.Subjects[subject].t2 || 'N/A' %></td>
                    <!-- Calculate and display Avg Quiz -->
                    <td>
                        <% if (data.Subjects[subject].q1 !== undefined && data.Subjects[subject].q2 !== undefined) { %>
                            <%= ((parseFloat(data.Subjects[subject].q1) + parseFloat(data.Subjects[subject].q2)) / 2).toFixed(2) %>
                        <% } else { %>
                            N/A
                        <% } %>
                    </td>
                    <!-- Calculate and display Avg Test -->
                    <td>
                        <% if (data.Subjects[subject].t1 !== undefined && data.Subjects[subject].t2 !== undefined) { %>
                            <%= ((parseFloat(data.Subjects[subject].t1) + parseFloat(data.Subjects[subject].t2)) / 2).toFixed(2) %>
                        <% } else { %>
                            N/A
                        <% } %>
                    </td>
                    <!-- Display Total Classes, Attended Classes, and Attendance Percentage -->
                    <td><%= data.Subjects[subject].TotalClasses || 'N/A' %></td>
                    <td><%= data.Subjects[subject].AttendedClasses || 'N/A' %></td>
                    <td>
                        <% if (data.AttendancePercentage !== undefined) { %>
                            <%= data.AttendancePercentage.toFixed(2) %>
                        <% } else { %>
                            N/A
                        <% } %>
                        %
                    </td>
                </tr>
            <% } %>
        <% } %>
    <% } %>
</tbody>




    </table>

    <!-- Add the Print button -->
    <button id="printButton" onclick="generatePDF()">Print</button>
    <textarea id="email-body" placeholder="Type your email body here..."></textarea>
    <button onclick="sendEmail()">Send Email</button>

    <script>
function generatePDF() {
    const studentInfoContainer = document.querySelector('.input-container');
    const marksTableBody = document.getElementById('table-body');

    // Set the options for PDF generation
    const options = {
        margin: 10,
        filename: 'StudentMarks.pdf',
        image: { type: 'jpeg', quality: 1.0 },
        html2canvas: { scale: 6 },  // Increase scale for higher resolution
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };

    // Create a container to hold both student information and marks table
    const container = document.createElement('div');
    container.appendChild(studentInfoContainer.cloneNode(true));
    container.appendChild(marksTableBody.cloneNode(true));

    // Apply specific styles for the PDF
    container.style.backgroundColor = '#fff'; // Background color
    container.style.padding = '20px'; // Padding

    // Ensure the logo image is loaded before generating the PDF
    const logoImage = document.getElementById('college-logo');

    logoImage.onload = function () {
        // Generate PDF after the logo image is loaded
        html2pdf(container, options);
    };

    logoImage.src = 'R.V._College_of_Engineering_logo.png'; // Set the image source
}

      function sendEmail() {
    const studentInfo = document.getElementById('student-info');
    const marksTableBody = document.getElementById('table-body');

    // Extract student information and marks table HTML
    const studentInfoHTML = studentInfo.outerHTML;
    const marksTableHTML = marksTableBody.outerHTML;

    // Combine both in a single HTML
    const emailContent = studentInfoHTML + marksTableHTML;

    // Use AJAX or fetch to send the content to your server
    fetch('/send-email', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            to: 'kiranv24042004@gmail.com',  // Add the recipient's email address
            subject: 'Student Marks Report',
            body: emailContent
        })
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error('Email sending failed');
        }
    })
    .then(data => {
        console.log('Email sent:', data);
        alert('Email sent successfully!');
    })
    .catch(error => {
        console.error('Error sending email:', error);
        alert('Error sending email. Please try again.');
    });
}

    </script>
</body>

</html>
